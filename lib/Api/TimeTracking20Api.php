<?php
/**
 * TimeTracking20Api
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\Clickup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ClickUp API V2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\Clickup\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Msn\Apis\Clickup\ApiException;
use Msn\Apis\Clickup\Configuration;
use Msn\Apis\Clickup\HeaderSelector;
use Msn\Apis\Clickup\ObjectSerializer;

/**
 * TimeTracking20Api Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\Clickup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimeTracking20Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2TeamTeamIdTimeEntriesCurrentGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesStartTimerIdPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesStopPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTagsDelete' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTagsGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTagsPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTagsPut' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTimeEntryIdGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdTimeEntriesTimerIdPut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesCurrentGet
     *
     * Get Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesCurrentGet(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesCurrentGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesCurrentGetWithHttpInfo
     *
     * Get Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesCurrentGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesCurrentGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesCurrentGetAsync
     *
     * Get Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesCurrentGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesCurrentGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesCurrentGetAsyncWithHttpInfo
     *
     * Get Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesCurrentGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesCurrentGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesCurrentGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesCurrentGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesCurrentGet'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries/current';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesGet
     *
     * Get Time Entries Within a Date Range
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesGet(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesGetWithHttpInfo
     *
     * Get Time Entries Within a Date Range
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesGetAsync
     *
     * Get Time Entries Within a Date Range
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesGetAsyncWithHttpInfo
     *
     * Get Time Entries Within a Date Range
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesGet'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesPost
     *
     * Create a Time Entry
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesPost($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesPostWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesPostWithHttpInfo
     *
     * Create a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesPostWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesPostAsync
     *
     * Create a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesPostAsync($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesPostAsyncWithHttpInfo
     *
     * Create a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesPostAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesPost'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesPostRequest($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesPost'][0])
    {



        $resourcePath = '/api/v2/team/team_id/time_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStartTimerIdPost
     *
     * Start a Time Entry
     *
     * @param  string $timer_id timer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesStartTimerIdPost($timer_id, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesStartTimerIdPostWithHttpInfo($timer_id, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStartTimerIdPostWithHttpInfo
     *
     * Start a Time Entry
     *
     * @param  string $timer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesStartTimerIdPostWithHttpInfo($timer_id, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesStartTimerIdPostRequest($timer_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStartTimerIdPostAsync
     *
     * Start a Time Entry
     *
     * @param  string $timer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesStartTimerIdPostAsync($timer_id, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesStartTimerIdPostAsyncWithHttpInfo($timer_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStartTimerIdPostAsyncWithHttpInfo
     *
     * Start a Time Entry
     *
     * @param  string $timer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesStartTimerIdPostAsyncWithHttpInfo($timer_id, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesStartTimerIdPostRequest($timer_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesStartTimerIdPost'
     *
     * @param  string $timer_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesStartTimerIdPostRequest($timer_id, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStartTimerIdPost'][0])
    {

        // verify the required parameter 'timer_id' is set
        if ($timer_id === null || (is_array($timer_id) && count($timer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $timer_id when calling apiV2TeamTeamIdTimeEntriesStartTimerIdPost'
            );
        }


        $resourcePath = '/api/v2/team/team_id/time_entries/start/{timer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($timer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timer_id' . '}',
                ObjectSerializer::toPathValue($timer_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStopPost
     *
     * Stop Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesStopPost(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesStopPostWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStopPostWithHttpInfo
     *
     * Stop Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesStopPostWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesStopPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStopPostAsync
     *
     * Stop Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesStopPostAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesStopPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesStopPostAsyncWithHttpInfo
     *
     * Stop Running Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesStopPostAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesStopPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesStopPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesStopPostRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesStopPost'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsDelete
     *
     * Remove Tags From Time Entry
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTagsDelete($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTagsDeleteWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsDeleteWithHttpInfo
     *
     * Remove Tags From Time Entry
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTagsDeleteWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsDeleteRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsDeleteAsync
     *
     * Remove Tags From Time Entry
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsDeleteAsync($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTagsDeleteAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsDeleteAsyncWithHttpInfo
     *
     * Remove Tags From Time Entry
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsDeleteAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsDeleteRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTagsDelete'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTagsDeleteRequest($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsDelete'][0])
    {



        $resourcePath = '/api/v2/team/team_id/time_entries/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsGet
     *
     * Get All Time Entry Tags
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTagsGet(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTagsGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsGetWithHttpInfo
     *
     * Get All Time Entry Tags
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTagsGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsGetAsync
     *
     * Get All Time Entry Tags
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTagsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsGetAsyncWithHttpInfo
     *
     * Get All Time Entry Tags
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTagsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTagsGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsGet'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPost
     *
     * Add Tags to Time Entries
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPost($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTagsPostWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPostWithHttpInfo
     *
     * Add Tags to Time Entries
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPostWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPostAsync
     *
     * Add Tags to Time Entries
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPostAsync($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTagsPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPostAsyncWithHttpInfo
     *
     * Add Tags to Time Entries
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPostAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTagsPost'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPostRequest($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPost'][0])
    {



        $resourcePath = '/api/v2/team/team_id/time_entries/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPut
     *
     * Rename Time Entry Tags
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPut($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTagsPutWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPutWithHttpInfo
     *
     * Rename Time Entry Tags
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPutWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsPutRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPutAsync
     *
     * Rename Time Entry Tags
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPutAsync($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTagsPutAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTagsPutAsyncWithHttpInfo
     *
     * Rename Time Entry Tags
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPutAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTagsPutRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTagsPut'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTagsPutRequest($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTagsPut'][0])
    {



        $resourcePath = '/api/v2/team/team_id/time_entries/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete
     *
     * Delete a Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteWithHttpInfo
     *
     * Delete a Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteAsync
     *
     * Delete a Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteAsyncWithHttpInfo
     *
     * Delete a Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdDeleteRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdDelete'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries/time_entry_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdGet
     *
     * Get Singular Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdGet(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdGetWithHttpInfo
     *
     * Get Singular Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdGetAsync
     *
     * Get Singular Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimeEntryIdGetAsyncWithHttpInfo
     *
     * Get Singular Time Entry
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTimeEntryIdGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTimeEntryIdGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimeEntryIdGet'][0])
    {


        $resourcePath = '/api/v2/team/team_id/time_entries/time_entry_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet
     *
     * Get Time Entry History
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetWithHttpInfo
     *
     * Get Time Entry History
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetAsync
     *
     * Get Time Entry History
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetAsyncWithHttpInfo
     *
     * Get Time Entry History
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdHistoryGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdHistoryGet'][0])
    {


        $resourcePath = '/api/v2/team/team_Id/time_entries/timer_id/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdPut
     *
     * Update a Time Entry
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdPut($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'][0])
    {
        $this->apiV2TeamTeamIdTimeEntriesTimerIdPutWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdPutWithHttpInfo
     *
     * Update a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdPutWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'][0])
    {
        $request = $this->apiV2TeamTeamIdTimeEntriesTimerIdPutRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdPutAsync
     *
     * Update a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdPutAsync($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'][0])
    {
        return $this->apiV2TeamTeamIdTimeEntriesTimerIdPutAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdTimeEntriesTimerIdPutAsyncWithHttpInfo
     *
     * Update a Time Entry
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdPutAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdTimeEntriesTimerIdPutRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdTimeEntriesTimerIdPut'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdTimeEntriesTimerIdPutRequest($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdTimeEntriesTimerIdPut'][0])
    {



        $resourcePath = '/api/v2/team/team_id/time_entries/timer_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
