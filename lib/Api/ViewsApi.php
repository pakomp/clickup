<?php
/**
 * ViewsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  msn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ClickUp API V2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace msn\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use msn\ApiException;
use msn\Configuration;
use msn\HeaderSelector;
use msn\ObjectSerializer;

/**
 * ViewsApi Class Doc Comment
 *
 * @category Class
 * @package  msn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ViewsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2FolderFolderIdViewGet' => [
            'application/json',
        ],
        'apiV2FolderFolderIdViewPost' => [
            'application/json',
        ],
        'apiV2ListListIdViewGet' => [
            'application/json',
        ],
        'apiV2ListListIdViewPost' => [
            'application/json',
        ],
        'apiV2SpaceSpaceIdViewGet' => [
            'application/json',
        ],
        'apiV2SpaceSpaceIdViewPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdViewGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdViewPost' => [
            'application/json',
        ],
        'apiV2ViewViewIdDelete' => [
            'application/json',
        ],
        'apiV2ViewViewIdGet' => [
            'application/json',
        ],
        'apiV2ViewViewIdPut' => [
            'application/json',
        ],
        'apiV2ViewViewIdTaskGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2FolderFolderIdViewGet
     *
     * Get Folder Views
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2FolderFolderIdViewGet($content_type = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewGet'][0])
    {
        $this->apiV2FolderFolderIdViewGetWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2FolderFolderIdViewGetWithHttpInfo
     *
     * Get Folder Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2FolderFolderIdViewGetWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewGet'][0])
    {
        $request = $this->apiV2FolderFolderIdViewGetRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2FolderFolderIdViewGetAsync
     *
     * Get Folder Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdViewGetAsync($content_type = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewGet'][0])
    {
        return $this->apiV2FolderFolderIdViewGetAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2FolderFolderIdViewGetAsyncWithHttpInfo
     *
     * Get Folder Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdViewGetAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2FolderFolderIdViewGetRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2FolderFolderIdViewGet'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2FolderFolderIdViewGetRequest($content_type = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewGet'][0])
    {



        $resourcePath = '/api/v2/folder/folder_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2FolderFolderIdViewPost
     *
     * Create Folder View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2FolderFolderIdViewPost($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewPost'][0])
    {
        $this->apiV2FolderFolderIdViewPostWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2FolderFolderIdViewPostWithHttpInfo
     *
     * Create Folder View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2FolderFolderIdViewPostWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewPost'][0])
    {
        $request = $this->apiV2FolderFolderIdViewPostRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2FolderFolderIdViewPostAsync
     *
     * Create Folder View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdViewPostAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewPost'][0])
    {
        return $this->apiV2FolderFolderIdViewPostAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2FolderFolderIdViewPostAsyncWithHttpInfo
     *
     * Create Folder View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdViewPostAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2FolderFolderIdViewPostRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2FolderFolderIdViewPost'
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2FolderFolderIdViewPostRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2FolderFolderIdViewPost'][0])
    {




        $resourcePath = '/api/v2/folder/folder_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ListListIdViewGet
     *
     * Get List Views
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ListListIdViewGet($content_type = null, string $contentType = self::contentTypes['apiV2ListListIdViewGet'][0])
    {
        $this->apiV2ListListIdViewGetWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2ListListIdViewGetWithHttpInfo
     *
     * Get List Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ListListIdViewGetWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ListListIdViewGet'][0])
    {
        $request = $this->apiV2ListListIdViewGetRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ListListIdViewGetAsync
     *
     * Get List Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdViewGetAsync($content_type = null, string $contentType = self::contentTypes['apiV2ListListIdViewGet'][0])
    {
        return $this->apiV2ListListIdViewGetAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ListListIdViewGetAsyncWithHttpInfo
     *
     * Get List Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdViewGetAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ListListIdViewGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ListListIdViewGetRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ListListIdViewGet'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ListListIdViewGetRequest($content_type = null, string $contentType = self::contentTypes['apiV2ListListIdViewGet'][0])
    {



        $resourcePath = '/api/v2/list/list_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ListListIdViewPost
     *
     * Create List View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ListListIdViewPost($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ListListIdViewPost'][0])
    {
        $this->apiV2ListListIdViewPostWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2ListListIdViewPostWithHttpInfo
     *
     * Create List View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ListListIdViewPostWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ListListIdViewPost'][0])
    {
        $request = $this->apiV2ListListIdViewPostRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ListListIdViewPostAsync
     *
     * Create List View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdViewPostAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ListListIdViewPost'][0])
    {
        return $this->apiV2ListListIdViewPostAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ListListIdViewPostAsyncWithHttpInfo
     *
     * Create List View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdViewPostAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ListListIdViewPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ListListIdViewPostRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ListListIdViewPost'
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ListListIdViewPostRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ListListIdViewPost'][0])
    {




        $resourcePath = '/api/v2/list/list_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SpaceSpaceIdViewGet
     *
     * Get Space Views
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SpaceSpaceIdViewGet($content_type = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewGet'][0])
    {
        $this->apiV2SpaceSpaceIdViewGetWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2SpaceSpaceIdViewGetWithHttpInfo
     *
     * Get Space Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SpaceSpaceIdViewGetWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewGet'][0])
    {
        $request = $this->apiV2SpaceSpaceIdViewGetRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SpaceSpaceIdViewGetAsync
     *
     * Get Space Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SpaceSpaceIdViewGetAsync($content_type = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewGet'][0])
    {
        return $this->apiV2SpaceSpaceIdViewGetAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SpaceSpaceIdViewGetAsyncWithHttpInfo
     *
     * Get Space Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SpaceSpaceIdViewGetAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2SpaceSpaceIdViewGetRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SpaceSpaceIdViewGet'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SpaceSpaceIdViewGetRequest($content_type = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewGet'][0])
    {



        $resourcePath = '/api/v2/space/space_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SpaceSpaceIdViewPost
     *
     * Create Space View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2SpaceSpaceIdViewPost($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewPost'][0])
    {
        $this->apiV2SpaceSpaceIdViewPostWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2SpaceSpaceIdViewPostWithHttpInfo
     *
     * Create Space View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SpaceSpaceIdViewPostWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewPost'][0])
    {
        $request = $this->apiV2SpaceSpaceIdViewPostRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2SpaceSpaceIdViewPostAsync
     *
     * Create Space View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SpaceSpaceIdViewPostAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewPost'][0])
    {
        return $this->apiV2SpaceSpaceIdViewPostAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SpaceSpaceIdViewPostAsyncWithHttpInfo
     *
     * Create Space View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SpaceSpaceIdViewPostAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2SpaceSpaceIdViewPostRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SpaceSpaceIdViewPost'
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SpaceSpaceIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SpaceSpaceIdViewPostRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2SpaceSpaceIdViewPost'][0])
    {




        $resourcePath = '/api/v2/space/space_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdViewGet
     *
     * Get Team Views
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdViewGet($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewGet'][0])
    {
        $this->apiV2TeamTeamIdViewGetWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdViewGetWithHttpInfo
     *
     * Get Team Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdViewGetWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewGet'][0])
    {
        $request = $this->apiV2TeamTeamIdViewGetRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdViewGetAsync
     *
     * Get Team Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdViewGetAsync($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewGet'][0])
    {
        return $this->apiV2TeamTeamIdViewGetAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdViewGetAsyncWithHttpInfo
     *
     * Get Team Views
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdViewGetAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdViewGetRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdViewGet'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdViewGetRequest($content_type = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewGet'][0])
    {



        $resourcePath = '/api/v2/team/team_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdViewPost
     *
     * Create Team View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdViewPost($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewPost'][0])
    {
        $this->apiV2TeamTeamIdViewPostWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdViewPostWithHttpInfo
     *
     * Create Team View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewPost'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdViewPostWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewPost'][0])
    {
        $request = $this->apiV2TeamTeamIdViewPostRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdViewPostAsync
     *
     * Create Team View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdViewPostAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewPost'][0])
    {
        return $this->apiV2TeamTeamIdViewPostAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdViewPostAsyncWithHttpInfo
     *
     * Create Team View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdViewPostAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdViewPostRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdViewPost'
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdViewPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdViewPostRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdViewPost'][0])
    {




        $resourcePath = '/api/v2/team/team_id/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ViewViewIdDelete
     *
     * Delete a View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdDelete'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ViewViewIdDelete($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdDelete'][0])
    {
        $this->apiV2ViewViewIdDeleteWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2ViewViewIdDeleteWithHttpInfo
     *
     * Delete a View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdDelete'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ViewViewIdDeleteWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdDelete'][0])
    {
        $request = $this->apiV2ViewViewIdDeleteRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ViewViewIdDeleteAsync
     *
     * Delete a View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdDeleteAsync($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdDelete'][0])
    {
        return $this->apiV2ViewViewIdDeleteAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ViewViewIdDeleteAsyncWithHttpInfo
     *
     * Delete a View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdDeleteAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2ViewViewIdDeleteRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ViewViewIdDelete'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ViewViewIdDeleteRequest($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdDelete'][0])
    {



        $resourcePath = '/api/v2/view/view_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ViewViewIdGet
     *
     * Get View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ViewViewIdGet($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdGet'][0])
    {
        $this->apiV2ViewViewIdGetWithHttpInfo($content_type, $contentType);
    }

    /**
     * Operation apiV2ViewViewIdGetWithHttpInfo
     *
     * Get View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ViewViewIdGetWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdGet'][0])
    {
        $request = $this->apiV2ViewViewIdGetRequest($content_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ViewViewIdGetAsync
     *
     * Get View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdGetAsync($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdGet'][0])
    {
        return $this->apiV2ViewViewIdGetAsyncWithHttpInfo($content_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ViewViewIdGetAsyncWithHttpInfo
     *
     * Get View
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdGetAsyncWithHttpInfo($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ViewViewIdGetRequest($content_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ViewViewIdGet'
     *
     * @param  string $content_type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ViewViewIdGetRequest($content_type = null, string $contentType = self::contentTypes['apiV2ViewViewIdGet'][0])
    {



        $resourcePath = '/api/v2/view/view_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ViewViewIdPut
     *
     * Update View
     *
     * @param  string $content_type content_type (optional)
     * @param  string $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdPut'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ViewViewIdPut($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ViewViewIdPut'][0])
    {
        $this->apiV2ViewViewIdPutWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2ViewViewIdPutWithHttpInfo
     *
     * Update View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdPut'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ViewViewIdPutWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ViewViewIdPut'][0])
    {
        $request = $this->apiV2ViewViewIdPutRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ViewViewIdPutAsync
     *
     * Update View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdPutAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ViewViewIdPut'][0])
    {
        return $this->apiV2ViewViewIdPutAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ViewViewIdPutAsyncWithHttpInfo
     *
     * Update View
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdPutAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ViewViewIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2ViewViewIdPutRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ViewViewIdPut'
     *
     * @param  string $content_type (optional)
     * @param  string $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ViewViewIdPutRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2ViewViewIdPut'][0])
    {




        $resourcePath = '/api/v2/view/view_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ViewViewIdTaskGet
     *
     * Get View Tasks
     *
     * @param  string $content_type content_type (optional)
     * @param  int $page page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdTaskGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ViewViewIdTaskGet($content_type = null, $page = null, string $contentType = self::contentTypes['apiV2ViewViewIdTaskGet'][0])
    {
        $this->apiV2ViewViewIdTaskGetWithHttpInfo($content_type, $page, $contentType);
    }

    /**
     * Operation apiV2ViewViewIdTaskGetWithHttpInfo
     *
     * Get View Tasks
     *
     * @param  string $content_type (optional)
     * @param  int $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdTaskGet'] to see the possible values for this operation
     *
     * @throws \msn\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ViewViewIdTaskGetWithHttpInfo($content_type = null, $page = null, string $contentType = self::contentTypes['apiV2ViewViewIdTaskGet'][0])
    {
        $request = $this->apiV2ViewViewIdTaskGetRequest($content_type, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ViewViewIdTaskGetAsync
     *
     * Get View Tasks
     *
     * @param  string $content_type (optional)
     * @param  int $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdTaskGetAsync($content_type = null, $page = null, string $contentType = self::contentTypes['apiV2ViewViewIdTaskGet'][0])
    {
        return $this->apiV2ViewViewIdTaskGetAsyncWithHttpInfo($content_type, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ViewViewIdTaskGetAsyncWithHttpInfo
     *
     * Get View Tasks
     *
     * @param  string $content_type (optional)
     * @param  int $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ViewViewIdTaskGetAsyncWithHttpInfo($content_type = null, $page = null, string $contentType = self::contentTypes['apiV2ViewViewIdTaskGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2ViewViewIdTaskGetRequest($content_type, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ViewViewIdTaskGet'
     *
     * @param  string $content_type (optional)
     * @param  int $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ViewViewIdTaskGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ViewViewIdTaskGetRequest($content_type = null, $page = null, string $contentType = self::contentTypes['apiV2ViewViewIdTaskGet'][0])
    {




        $resourcePath = '/api/v2/view/view_id/task';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
