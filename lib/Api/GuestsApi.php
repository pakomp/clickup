<?php
/**
 * GuestsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Msn\Apis\Clickup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ClickUp API V2
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Msn\Apis\Clickup\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Msn\Apis\Clickup\ApiException;
use Msn\Apis\Clickup\Configuration;
use Msn\Apis\Clickup\HeaderSelector;
use Msn\Apis\Clickup\ObjectSerializer;

/**
 * GuestsApi Class Doc Comment
 *
 * @category Class
 * @package  Msn\Apis\Clickup
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GuestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2FolderFolderIdGuestGuestIdDelete' => [
            'application/json',
        ],
        'apiV2FolderFolderIdGuestGuestIdPost' => [
            'application/json',
        ],
        'apiV2ListListIdGuestGuestIdDelete' => [
            'application/json',
        ],
        'apiV2ListListIdGuestGuestIdPost' => [
            'application/json',
        ],
        'apiV2TaskTaskIdGuestGuestIdDelete' => [
            'application/json',
        ],
        'apiV2TaskTaskIdGuestGuestIdPost' => [
            'application/json',
        ],
        'apiV2TeamTeamIdGuestGuestIdDelete' => [
            'application/json',
        ],
        'apiV2TeamTeamIdGuestGuestIdGet' => [
            'application/json',
        ],
        'apiV2TeamTeamIdGuestGuestIdPut' => [
            'application/json',
        ],
        'apiV2TeamTeamIdGuestPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdDelete
     *
     * Remove Guest from Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2FolderFolderIdGuestGuestIdDelete(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'][0])
    {
        $this->apiV2FolderFolderIdGuestGuestIdDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdDeleteWithHttpInfo
     *
     * Remove Guest from Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2FolderFolderIdGuestGuestIdDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'][0])
    {
        $request = $this->apiV2FolderFolderIdGuestGuestIdDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdDeleteAsync
     *
     * Remove Guest from Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdGuestGuestIdDeleteAsync(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'][0])
    {
        return $this->apiV2FolderFolderIdGuestGuestIdDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdDeleteAsyncWithHttpInfo
     *
     * Remove Guest from Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdGuestGuestIdDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2FolderFolderIdGuestGuestIdDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2FolderFolderIdGuestGuestIdDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2FolderFolderIdGuestGuestIdDeleteRequest(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdDelete'][0])
    {


        $resourcePath = '/api/v2/folder/folder_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdPost
     *
     * Add Guest to Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2FolderFolderIdGuestGuestIdPost(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'][0])
    {
        $this->apiV2FolderFolderIdGuestGuestIdPostWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdPostWithHttpInfo
     *
     * Add Guest to Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2FolderFolderIdGuestGuestIdPostWithHttpInfo(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'][0])
    {
        $request = $this->apiV2FolderFolderIdGuestGuestIdPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdPostAsync
     *
     * Add Guest to Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdGuestGuestIdPostAsync(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'][0])
    {
        return $this->apiV2FolderFolderIdGuestGuestIdPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2FolderFolderIdGuestGuestIdPostAsyncWithHttpInfo
     *
     * Add Guest to Folder
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2FolderFolderIdGuestGuestIdPostAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2FolderFolderIdGuestGuestIdPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2FolderFolderIdGuestGuestIdPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2FolderFolderIdGuestGuestIdPostRequest(string $contentType = self::contentTypes['apiV2FolderFolderIdGuestGuestIdPost'][0])
    {


        $resourcePath = '/api/v2/folder/folder_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdDelete
     *
     * Remove Guest from List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ListListIdGuestGuestIdDelete(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdDelete'][0])
    {
        $this->apiV2ListListIdGuestGuestIdDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdDeleteWithHttpInfo
     *
     * Remove Guest from List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ListListIdGuestGuestIdDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdDelete'][0])
    {
        $request = $this->apiV2ListListIdGuestGuestIdDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdDeleteAsync
     *
     * Remove Guest from List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdGuestGuestIdDeleteAsync(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdDelete'][0])
    {
        return $this->apiV2ListListIdGuestGuestIdDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdDeleteAsyncWithHttpInfo
     *
     * Remove Guest from List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdGuestGuestIdDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2ListListIdGuestGuestIdDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ListListIdGuestGuestIdDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ListListIdGuestGuestIdDeleteRequest(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdDelete'][0])
    {


        $resourcePath = '/api/v2/list/list_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdPost
     *
     * Add Guest to List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2ListListIdGuestGuestIdPost(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdPost'][0])
    {
        $this->apiV2ListListIdGuestGuestIdPostWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdPostWithHttpInfo
     *
     * Add Guest to List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2ListListIdGuestGuestIdPostWithHttpInfo(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdPost'][0])
    {
        $request = $this->apiV2ListListIdGuestGuestIdPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdPostAsync
     *
     * Add Guest to List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdGuestGuestIdPostAsync(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdPost'][0])
    {
        return $this->apiV2ListListIdGuestGuestIdPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2ListListIdGuestGuestIdPostAsyncWithHttpInfo
     *
     * Add Guest to List
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2ListListIdGuestGuestIdPostAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2ListListIdGuestGuestIdPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2ListListIdGuestGuestIdPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2ListListIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2ListListIdGuestGuestIdPostRequest(string $contentType = self::contentTypes['apiV2ListListIdGuestGuestIdPost'][0])
    {


        $resourcePath = '/api/v2/list/list_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdDelete
     *
     * Remove Guest from Task
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TaskTaskIdGuestGuestIdDelete(string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'][0])
    {
        $this->apiV2TaskTaskIdGuestGuestIdDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdDeleteWithHttpInfo
     *
     * Remove Guest from Task
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TaskTaskIdGuestGuestIdDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'][0])
    {
        $request = $this->apiV2TaskTaskIdGuestGuestIdDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdDeleteAsync
     *
     * Remove Guest from Task
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TaskTaskIdGuestGuestIdDeleteAsync(string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'][0])
    {
        return $this->apiV2TaskTaskIdGuestGuestIdDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdDeleteAsyncWithHttpInfo
     *
     * Remove Guest from Task
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TaskTaskIdGuestGuestIdDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2TaskTaskIdGuestGuestIdDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TaskTaskIdGuestGuestIdDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TaskTaskIdGuestGuestIdDeleteRequest(string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdDelete'][0])
    {


        $resourcePath = '/api/v2/task/task_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdPost
     *
     * Add Guest to Task
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TaskTaskIdGuestGuestIdPost($body = null, string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'][0])
    {
        $this->apiV2TaskTaskIdGuestGuestIdPostWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdPostWithHttpInfo
     *
     * Add Guest to Task
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TaskTaskIdGuestGuestIdPostWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'][0])
    {
        $request = $this->apiV2TaskTaskIdGuestGuestIdPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdPostAsync
     *
     * Add Guest to Task
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TaskTaskIdGuestGuestIdPostAsync($body = null, string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'][0])
    {
        return $this->apiV2TaskTaskIdGuestGuestIdPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TaskTaskIdGuestGuestIdPostAsyncWithHttpInfo
     *
     * Add Guest to Task
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TaskTaskIdGuestGuestIdPostAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TaskTaskIdGuestGuestIdPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TaskTaskIdGuestGuestIdPost'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TaskTaskIdGuestGuestIdPostRequest($body = null, string $contentType = self::contentTypes['apiV2TaskTaskIdGuestGuestIdPost'][0])
    {



        $resourcePath = '/api/v2/task/task_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdDelete
     *
     * Remove Guest from Workspace
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdGuestGuestIdDelete(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'][0])
    {
        $this->apiV2TeamTeamIdGuestGuestIdDeleteWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdDeleteWithHttpInfo
     *
     * Remove Guest from Workspace
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdGuestGuestIdDeleteWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'][0])
    {
        $request = $this->apiV2TeamTeamIdGuestGuestIdDeleteRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdDeleteAsync
     *
     * Remove Guest from Workspace
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdDeleteAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'][0])
    {
        return $this->apiV2TeamTeamIdGuestGuestIdDeleteAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdDeleteAsyncWithHttpInfo
     *
     * Remove Guest from Workspace
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdDeleteAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdGuestGuestIdDeleteRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdGuestGuestIdDelete'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdGuestGuestIdDeleteRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdDelete'][0])
    {


        $resourcePath = '/api/v2/team/team_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdGet
     *
     * Get Guest
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdGuestGuestIdGet(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'][0])
    {
        $this->apiV2TeamTeamIdGuestGuestIdGetWithHttpInfo($contentType);
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdGetWithHttpInfo
     *
     * Get Guest
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdGuestGuestIdGetWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'][0])
    {
        $request = $this->apiV2TeamTeamIdGuestGuestIdGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdGetAsync
     *
     * Get Guest
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdGetAsync(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'][0])
    {
        return $this->apiV2TeamTeamIdGuestGuestIdGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdGetAsyncWithHttpInfo
     *
     * Get Guest
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdGetAsyncWithHttpInfo(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdGuestGuestIdGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdGuestGuestIdGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdGuestGuestIdGetRequest(string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdGet'][0])
    {


        $resourcePath = '/api/v2/team/team_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdPut
     *
     * Edit Guest on Workspace
     *
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdGuestGuestIdPut($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'][0])
    {
        $this->apiV2TeamTeamIdGuestGuestIdPutWithHttpInfo($body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdPutWithHttpInfo
     *
     * Edit Guest on Workspace
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdGuestGuestIdPutWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'][0])
    {
        $request = $this->apiV2TeamTeamIdGuestGuestIdPutRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdPutAsync
     *
     * Edit Guest on Workspace
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdPutAsync($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'][0])
    {
        return $this->apiV2TeamTeamIdGuestGuestIdPutAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdGuestGuestIdPutAsyncWithHttpInfo
     *
     * Edit Guest on Workspace
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestGuestIdPutAsyncWithHttpInfo($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdGuestGuestIdPutRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdGuestGuestIdPut'
     *
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdGuestGuestIdPutRequest($body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestGuestIdPut'][0])
    {



        $resourcePath = '/api/v2/team/team_id/guest/guest_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TeamTeamIdGuestPost
     *
     * Invite Guest to Workspace
     *
     * @param  string $content_type content_type (optional)
     * @param  object $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function apiV2TeamTeamIdGuestPost($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestPost'][0])
    {
        $this->apiV2TeamTeamIdGuestPostWithHttpInfo($content_type, $body, $contentType);
    }

    /**
     * Operation apiV2TeamTeamIdGuestPostWithHttpInfo
     *
     * Invite Guest to Workspace
     *
     * @param  string $content_type (optional)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestPost'] to see the possible values for this operation
     *
     * @throws \Msn\Apis\Clickup\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TeamTeamIdGuestPostWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestPost'][0])
    {
        $request = $this->apiV2TeamTeamIdGuestPostRequest($content_type, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation apiV2TeamTeamIdGuestPostAsync
     *
     * Invite Guest to Workspace
     *
     * @param  string $content_type (optional)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestPostAsync($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestPost'][0])
    {
        return $this->apiV2TeamTeamIdGuestPostAsyncWithHttpInfo($content_type, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TeamTeamIdGuestPostAsyncWithHttpInfo
     *
     * Invite Guest to Workspace
     *
     * @param  string $content_type (optional)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2TeamTeamIdGuestPostAsyncWithHttpInfo($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestPost'][0])
    {
        $returnType = '';
        $request = $this->apiV2TeamTeamIdGuestPostRequest($content_type, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TeamTeamIdGuestPost'
     *
     * @param  string $content_type (optional)
     * @param  object $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TeamTeamIdGuestPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TeamTeamIdGuestPostRequest($content_type = null, $body = null, string $contentType = self::contentTypes['apiV2TeamTeamIdGuestPost'][0])
    {




        $resourcePath = '/api/v2/team/team_id/guest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
